// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `neutron/dex/limit_order_tranche.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:neutron.dex.LimitOrderTrancheKey)
pub struct LimitOrderTrancheKey {
    // message fields
    // @@protoc_insertion_point(field:neutron.dex.LimitOrderTrancheKey.trade_pair_id)
    pub trade_pair_id: ::protobuf::MessageField<super::trade_pair_id::TradePairID>,
    // @@protoc_insertion_point(field:neutron.dex.LimitOrderTrancheKey.tick_index_taker_to_maker)
    pub tick_index_taker_to_maker: i64,
    // @@protoc_insertion_point(field:neutron.dex.LimitOrderTrancheKey.tranche_key)
    pub tranche_key: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:neutron.dex.LimitOrderTrancheKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LimitOrderTrancheKey {
    fn default() -> &'a LimitOrderTrancheKey {
        <LimitOrderTrancheKey as ::protobuf::Message>::default_instance()
    }
}

impl LimitOrderTrancheKey {
    pub fn new() -> LimitOrderTrancheKey {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::trade_pair_id::TradePairID>(
            "trade_pair_id",
            |m: &LimitOrderTrancheKey| { &m.trade_pair_id },
            |m: &mut LimitOrderTrancheKey| { &mut m.trade_pair_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tick_index_taker_to_maker",
            |m: &LimitOrderTrancheKey| { &m.tick_index_taker_to_maker },
            |m: &mut LimitOrderTrancheKey| { &mut m.tick_index_taker_to_maker },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tranche_key",
            |m: &LimitOrderTrancheKey| { &m.tranche_key },
            |m: &mut LimitOrderTrancheKey| { &mut m.tranche_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LimitOrderTrancheKey>(
            "LimitOrderTrancheKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LimitOrderTrancheKey {
    const NAME: &'static str = "LimitOrderTrancheKey";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.trade_pair_id)?;
                },
                16 => {
                    self.tick_index_taker_to_maker = is.read_int64()?;
                },
                26 => {
                    self.tranche_key = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.trade_pair_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.tick_index_taker_to_maker != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.tick_index_taker_to_maker);
        }
        if !self.tranche_key.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.tranche_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.trade_pair_id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.tick_index_taker_to_maker != 0 {
            os.write_int64(2, self.tick_index_taker_to_maker)?;
        }
        if !self.tranche_key.is_empty() {
            os.write_string(3, &self.tranche_key)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LimitOrderTrancheKey {
        LimitOrderTrancheKey::new()
    }

    fn clear(&mut self) {
        self.trade_pair_id.clear();
        self.tick_index_taker_to_maker = 0;
        self.tranche_key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LimitOrderTrancheKey {
        static instance: LimitOrderTrancheKey = LimitOrderTrancheKey {
            trade_pair_id: ::protobuf::MessageField::none(),
            tick_index_taker_to_maker: 0,
            tranche_key: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LimitOrderTrancheKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LimitOrderTrancheKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LimitOrderTrancheKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LimitOrderTrancheKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:neutron.dex.LimitOrderTranche)
pub struct LimitOrderTranche {
    // message fields
    // @@protoc_insertion_point(field:neutron.dex.LimitOrderTranche.key)
    pub key: ::protobuf::MessageField<LimitOrderTrancheKey>,
    // @@protoc_insertion_point(field:neutron.dex.LimitOrderTranche.reserves_maker_denom)
    pub reserves_maker_denom: ::std::string::String,
    // @@protoc_insertion_point(field:neutron.dex.LimitOrderTranche.reserves_taker_denom)
    pub reserves_taker_denom: ::std::string::String,
    // @@protoc_insertion_point(field:neutron.dex.LimitOrderTranche.total_maker_denom)
    pub total_maker_denom: ::std::string::String,
    // @@protoc_insertion_point(field:neutron.dex.LimitOrderTranche.total_taker_denom)
    pub total_taker_denom: ::std::string::String,
    ///  JIT orders also use goodTilDate to handle deletion but represent a special case
    ///  All JIT orders have a goodTilDate of 0 and an exception is made to still still treat these orders as live
    ///  Order deletion still functions the same and the orders will be deleted at the end of the block
    // @@protoc_insertion_point(field:neutron.dex.LimitOrderTranche.expiration_time)
    pub expiration_time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:neutron.dex.LimitOrderTranche.price_taker_to_maker)
    pub price_taker_to_maker: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:neutron.dex.LimitOrderTranche.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LimitOrderTranche {
    fn default() -> &'a LimitOrderTranche {
        <LimitOrderTranche as ::protobuf::Message>::default_instance()
    }
}

impl LimitOrderTranche {
    pub fn new() -> LimitOrderTranche {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, LimitOrderTrancheKey>(
            "key",
            |m: &LimitOrderTranche| { &m.key },
            |m: &mut LimitOrderTranche| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "reserves_maker_denom",
            |m: &LimitOrderTranche| { &m.reserves_maker_denom },
            |m: &mut LimitOrderTranche| { &mut m.reserves_maker_denom },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "reserves_taker_denom",
            |m: &LimitOrderTranche| { &m.reserves_taker_denom },
            |m: &mut LimitOrderTranche| { &mut m.reserves_taker_denom },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_maker_denom",
            |m: &LimitOrderTranche| { &m.total_maker_denom },
            |m: &mut LimitOrderTranche| { &mut m.total_maker_denom },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_taker_denom",
            |m: &LimitOrderTranche| { &m.total_taker_denom },
            |m: &mut LimitOrderTranche| { &mut m.total_taker_denom },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "expiration_time",
            |m: &LimitOrderTranche| { &m.expiration_time },
            |m: &mut LimitOrderTranche| { &mut m.expiration_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "price_taker_to_maker",
            |m: &LimitOrderTranche| { &m.price_taker_to_maker },
            |m: &mut LimitOrderTranche| { &mut m.price_taker_to_maker },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LimitOrderTranche>(
            "LimitOrderTranche",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LimitOrderTranche {
    const NAME: &'static str = "LimitOrderTranche";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.key)?;
                },
                18 => {
                    self.reserves_maker_denom = is.read_string()?;
                },
                26 => {
                    self.reserves_taker_denom = is.read_string()?;
                },
                34 => {
                    self.total_maker_denom = is.read_string()?;
                },
                42 => {
                    self.total_taker_denom = is.read_string()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.expiration_time)?;
                },
                58 => {
                    self.price_taker_to_maker = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.reserves_maker_denom.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.reserves_maker_denom);
        }
        if !self.reserves_taker_denom.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.reserves_taker_denom);
        }
        if !self.total_maker_denom.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.total_maker_denom);
        }
        if !self.total_taker_denom.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.total_taker_denom);
        }
        if let Some(v) = self.expiration_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.price_taker_to_maker.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.price_taker_to_maker);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.reserves_maker_denom.is_empty() {
            os.write_string(2, &self.reserves_maker_denom)?;
        }
        if !self.reserves_taker_denom.is_empty() {
            os.write_string(3, &self.reserves_taker_denom)?;
        }
        if !self.total_maker_denom.is_empty() {
            os.write_string(4, &self.total_maker_denom)?;
        }
        if !self.total_taker_denom.is_empty() {
            os.write_string(5, &self.total_taker_denom)?;
        }
        if let Some(v) = self.expiration_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if !self.price_taker_to_maker.is_empty() {
            os.write_string(7, &self.price_taker_to_maker)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LimitOrderTranche {
        LimitOrderTranche::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.reserves_maker_denom.clear();
        self.reserves_taker_denom.clear();
        self.total_maker_denom.clear();
        self.total_taker_denom.clear();
        self.expiration_time.clear();
        self.price_taker_to_maker.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LimitOrderTranche {
        static instance: LimitOrderTranche = LimitOrderTranche {
            key: ::protobuf::MessageField::none(),
            reserves_maker_denom: ::std::string::String::new(),
            reserves_taker_denom: ::std::string::String::new(),
            total_maker_denom: ::std::string::String::new(),
            total_taker_denom: ::std::string::String::new(),
            expiration_time: ::protobuf::MessageField::none(),
            price_taker_to_maker: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LimitOrderTranche {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LimitOrderTranche").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LimitOrderTranche {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LimitOrderTranche {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%neutron/dex/limit_order_tranche.proto\x12\x0bneutron.dex\x1a\x1fgoogl\
    e/protobuf/timestamp.proto\x1a\x1fneutron/dex/trade_pair_id.proto\x1a\
    \x14gogoproto/gogo.proto\x1a\x19neutron/dex/pair_id.proto\"\xaf\x01\n\
    \x14LimitOrderTrancheKey\x12<\n\rtrade_pair_id\x18\x01\x20\x01(\x0b2\x18\
    .neutron.dex.TradePairIDR\x0btradePairId\x128\n\x19tick_index_taker_to_m\
    aker\x18\x02\x20\x01(\x03R\x15tickIndexTakerToMaker\x12\x1f\n\x0btranche\
    _key\x18\x03\x20\x01(\tR\ntrancheKey\"\x8b\x07\n\x11LimitOrderTranche\
    \x123\n\x03key\x18\x01\x20\x01(\x0b2!.neutron.dex.LimitOrderTrancheKeyR\
    \x03key\x12\x97\x01\n\x14reserves_maker_denom\x18\x02\x20\x01(\tR\x12res\
    ervesMakerDenomBe\xf2\xde\x1f\x1byaml:\"reserves_maker_denom\"\xda\xde\
    \x1f&github.com/cosmos/cosmos-sdk/types.Int\xc8\xde\x1f\0\xea\xde\x1f\
    \x14reserves_maker_denom\x12\x97\x01\n\x14reserves_taker_denom\x18\x03\
    \x20\x01(\tR\x12reservesTakerDenomBe\xf2\xde\x1f\x1byaml:\"reserves_take\
    r_denom\"\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Int\xc8\xde\x1f\
    \0\xea\xde\x1f\x14reserves_taker_denom\x12\x8b\x01\n\x11total_maker_deno\
    m\x18\x04\x20\x01(\tR\x0ftotalMakerDenomB_\xf2\xde\x1f\x18yaml:\"total_m\
    aker_denom\"\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Int\xc8\xde\
    \x1f\0\xea\xde\x1f\x11total_maker_denom\x12\x8b\x01\n\x11total_taker_den\
    om\x18\x05\x20\x01(\tR\x0ftotalTakerDenomB_\xf2\xde\x1f\x18yaml:\"total_\
    taker_denom\"\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Int\xc8\xde\
    \x1f\0\xea\xde\x1f\x11total_taker_denom\x12M\n\x0fexpiration_time\x18\
    \x06\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x0eexpirationTimeB\x08\
    \x90\xdf\x1f\x01\xc8\xde\x1f\x01\x12\xa1\x01\n\x14price_taker_to_maker\
    \x18\x07\x20\x01(\tR\x11priceTakerToMakerBp\xf2\xde\x1f\x1byaml:\"price_\
    taker_to_maker\"\xda\xde\x1f1github.com/neutron-org/neutron/utils/math.P\
    recDec\xc8\xde\x1f\0\xea\xde\x1f\x14price_taker_to_makerB,Z*github.com/n\
    eutron-org/neutron/x/dex/typesJ\xce\x0c\n\x06\x12\x04\0\0:\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x14\n\x08\n\x01\
    \x08\x12\x03\x03\0A\n\t\n\x02\x08\x0b\x12\x03\x03\0A\n\t\n\x02\x03\0\x12\
    \x03\x04\0)\n\t\n\x02\x03\x01\x12\x03\x06\0)\n\t\n\x02\x03\x02\x12\x03\
    \x07\0\x1e\n\t\n\x02\x03\x03\x12\x03\x08\0#\n\n\n\x02\x04\0\x12\x04\n\0\
    \x0e\x01\n\n\n\x03\x04\0\x01\x12\x03\n\x08\x1c\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03\x0b\x02\x20\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0b\x02\r\n\x0c\
    \n\x05\x04\0\x02\0\x01\x12\x03\x0b\x0e\x1b\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03\x0b\x1e\x1f\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0c\x02&\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03\x0c\x02\x07\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x0c\x08!\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0c$%\n\x0b\n\
    \x04\x04\0\x02\x02\x12\x03\r\x02\x19\n\x0c\n\x05\x04\0\x02\x02\x05\x12\
    \x03\r\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\r\t\x14\n\x0c\n\x05\
    \x04\0\x02\x02\x03\x12\x03\r\x17\x18\n\n\n\x02\x04\x01\x12\x04\x10\0:\
    \x01\n\n\n\x03\x04\x01\x01\x12\x03\x10\x08\x19\n\x0b\n\x04\x04\x01\x02\0\
    \x12\x03\x11\x02\x1f\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x11\x02\x16\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x11\x17\x1a\n\x0c\n\x05\x04\x01\x02\
    \0\x03\x12\x03\x11\x1d\x1e\n\x0c\n\x04\x04\x01\x02\x01\x12\x04\x12\x02\
    \x17\x04\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x12\x02\x08\n\x0c\n\x05\
    \x04\x01\x02\x01\x01\x12\x03\x12\t\x1d\n\x0c\n\x05\x04\x01\x02\x01\x03\
    \x12\x03\x12\x20!\n\r\n\x05\x04\x01\x02\x01\x08\x12\x04\x12#\x17\x03\n\
    \x0f\n\x08\x04\x01\x02\x01\x08\xee\xfb\x03\x12\x03\x13\x06>\n\x0f\n\x08\
    \x04\x01\x02\x01\x08\xeb\xfb\x03\x12\x03\x14\x06G\n\x0f\n\x08\x04\x01\
    \x02\x01\x08\xe9\xfb\x03\x12\x03\x15\x06$\n\x0f\n\x08\x04\x01\x02\x01\
    \x08\xed\xfb\x03\x12\x03\x16\x062\n\x0c\n\x04\x04\x01\x02\x02\x12\x04\
    \x18\x02\x1d\x04\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x18\x02\x08\n\
    \x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x18\t\x1d\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03\x18\x20!\n\r\n\x05\x04\x01\x02\x02\x08\x12\x04\x18#\x1d\
    \x03\n\x0f\n\x08\x04\x01\x02\x02\x08\xee\xfb\x03\x12\x03\x19\x06>\n\x0f\
    \n\x08\x04\x01\x02\x02\x08\xeb\xfb\x03\x12\x03\x1a\x06G\n\x0f\n\x08\x04\
    \x01\x02\x02\x08\xe9\xfb\x03\x12\x03\x1b\x06$\n\x0f\n\x08\x04\x01\x02\
    \x02\x08\xed\xfb\x03\x12\x03\x1c\x062\n\x0c\n\x04\x04\x01\x02\x03\x12\
    \x04\x1e\x02#\x04\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x1e\x02\x08\n\
    \x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x1e\t\x1a\n\x0c\n\x05\x04\x01\x02\
    \x03\x03\x12\x03\x1e\x1d\x1e\n\r\n\x05\x04\x01\x02\x03\x08\x12\x04\x1e\
    \x20#\x03\n\x0f\n\x08\x04\x01\x02\x03\x08\xee\xfb\x03\x12\x03\x1f\x06;\n\
    \x0f\n\x08\x04\x01\x02\x03\x08\xeb\xfb\x03\x12\x03\x20\x06G\n\x0f\n\x08\
    \x04\x01\x02\x03\x08\xe9\xfb\x03\x12\x03!\x06$\n\x0f\n\x08\x04\x01\x02\
    \x03\x08\xed\xfb\x03\x12\x03\"\x06/\n\xb0\x01\n\x04\x04\x01\x02\x04\x12\
    \x04$\x02)\x04\"\xa1\x01\x20GoodTilDate\x20is\x20represented\x20as\x20se\
    conds\x20since\x20\x20January\x201,\x20year\x201,\x2000:00:00.00\x20UTC\
    \n\x20LimitOrders\x20with\x20goodTilDate\x20set\x20are\x20valid\x20as\
    \x20long\x20as\x20blockTime\x20<=\x20goodTilDate\n\n\x0c\n\x05\x04\x01\
    \x02\x04\x05\x12\x03$\x02\x08\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03$\t\
    \x1a\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03$\x1d\x1e\n\r\n\x05\x04\x01\
    \x02\x04\x08\x12\x04$\x20)\x03\n\x0f\n\x08\x04\x01\x02\x04\x08\xee\xfb\
    \x03\x12\x03%\x06;\n\x0f\n\x08\x04\x01\x02\x04\x08\xeb\xfb\x03\x12\x03&\
    \x06G\n\x0f\n\x08\x04\x01\x02\x04\x08\xe9\xfb\x03\x12\x03'\x06$\n\x0f\n\
    \x08\x04\x01\x02\x04\x08\xed\xfb\x03\x12\x03(\x06/\n\xab\x02\n\x04\x04\
    \x01\x02\x05\x12\x040\x023/\x1a\x9c\x02\x20JIT\x20orders\x20also\x20use\
    \x20goodTilDate\x20to\x20handle\x20deletion\x20but\x20represent\x20a\x20\
    special\x20case\n\x20All\x20JIT\x20orders\x20have\x20a\x20goodTilDate\
    \x20of\x200\x20and\x20an\x20exception\x20is\x20made\x20to\x20still\x20st\
    ill\x20treat\x20these\x20orders\x20as\x20live\n\x20Order\x20deletion\x20\
    still\x20functions\x20the\x20same\x20and\x20the\x20orders\x20will\x20be\
    \x20deleted\x20at\x20the\x20end\x20of\x20the\x20block\n\n\x0c\n\x05\x04\
    \x01\x02\x05\x06\x12\x030\x02\x1b\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\
    \x030\x1c+\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x030./\n\r\n\x05\x04\x01\
    \x02\x05\x08\x12\x04003.\n\x0f\n\x08\x04\x01\x02\x05\x08\xf2\xfb\x03\x12\
    \x031-G\n\x0f\n\x08\x04\x01\x02\x05\x08\xe9\xfb\x03\x12\x032-H\n\x0c\n\
    \x04\x04\x01\x02\x06\x12\x044\x029\x12\n\x0c\n\x05\x04\x01\x02\x06\x05\
    \x12\x034\x02\x08\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\x034\t\x1d\n\x0c\n\
    \x05\x04\x01\x02\x06\x03\x12\x034\x20!\n\r\n\x05\x04\x01\x02\x06\x08\x12\
    \x044\"9\x11\n\x0f\n\x08\x04\x01\x02\x06\x08\xee\xfb\x03\x12\x035\x10H\n\
    \x0f\n\x08\x04\x01\x02\x06\x08\xeb\xfb\x03\x12\x036\x10\\\n\x0f\n\x08\
    \x04\x01\x02\x06\x08\xe9\xfb\x03\x12\x037\x10.\n\x0f\n\x08\x04\x01\x02\
    \x06\x08\xed\xfb\x03\x12\x038\x10<b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(super::trade_pair_id::file_descriptor().clone());
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::pair_id::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(LimitOrderTrancheKey::generated_message_descriptor_data());
            messages.push(LimitOrderTranche::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
