// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `neutron/dex/pool_metadata.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:neutron.dex.PoolMetadata)
pub struct PoolMetadata {
    // message fields
    // @@protoc_insertion_point(field:neutron.dex.PoolMetadata.id)
    pub id: u64,
    // @@protoc_insertion_point(field:neutron.dex.PoolMetadata.tick)
    pub tick: i64,
    // @@protoc_insertion_point(field:neutron.dex.PoolMetadata.fee)
    pub fee: u64,
    // @@protoc_insertion_point(field:neutron.dex.PoolMetadata.pair_id)
    pub pair_id: ::protobuf::MessageField<super::pair_id::PairID>,
    // special fields
    // @@protoc_insertion_point(special_field:neutron.dex.PoolMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PoolMetadata {
    fn default() -> &'a PoolMetadata {
        <PoolMetadata as ::protobuf::Message>::default_instance()
    }
}

impl PoolMetadata {
    pub fn new() -> PoolMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &PoolMetadata| { &m.id },
            |m: &mut PoolMetadata| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tick",
            |m: &PoolMetadata| { &m.tick },
            |m: &mut PoolMetadata| { &mut m.tick },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fee",
            |m: &PoolMetadata| { &m.fee },
            |m: &mut PoolMetadata| { &mut m.fee },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pair_id::PairID>(
            "pair_id",
            |m: &PoolMetadata| { &m.pair_id },
            |m: &mut PoolMetadata| { &mut m.pair_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PoolMetadata>(
            "PoolMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PoolMetadata {
    const NAME: &'static str = "PoolMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint64()?;
                },
                16 => {
                    self.tick = is.read_int64()?;
                },
                24 => {
                    self.fee = is.read_uint64()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pair_id)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.id);
        }
        if self.tick != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.tick);
        }
        if self.fee != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.fee);
        }
        if let Some(v) = self.pair_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if self.tick != 0 {
            os.write_int64(2, self.tick)?;
        }
        if self.fee != 0 {
            os.write_uint64(3, self.fee)?;
        }
        if let Some(v) = self.pair_id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PoolMetadata {
        PoolMetadata::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.tick = 0;
        self.fee = 0;
        self.pair_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PoolMetadata {
        static instance: PoolMetadata = PoolMetadata {
            id: 0,
            tick: 0,
            fee: 0,
            pair_id: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PoolMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PoolMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PoolMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PoolMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fneutron/dex/pool_metadata.proto\x12\x0bneutron.dex\x1a\x19neutron/\
    dex/pair_id.proto\"r\n\x0cPoolMetadata\x12\x0e\n\x02id\x18\x01\x20\x01(\
    \x04R\x02id\x12\x12\n\x04tick\x18\x02\x20\x01(\x03R\x04tick\x12\x10\n\
    \x03fee\x18\x03\x20\x01(\x04R\x03fee\x12,\n\x07pair_id\x18\x04\x20\x01(\
    \x0b2\x13.neutron.dex.PairIDR\x06pairIdB,Z*github.com/neutron-org/neutro\
    n/x/dex/typesJ\xb0\x02\n\x06\x12\x04\0\0\x0c\x01\n\x08\n\x01\x0c\x12\x03\
    \0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x14\n\x08\n\x01\x08\x12\x03\x03\0\
    A\n\t\n\x02\x08\x0b\x12\x03\x03\0A\n\t\n\x02\x03\0\x12\x03\x05\0#\n\n\n\
    \x02\x04\0\x12\x04\x07\0\x0c\x01\n\n\n\x03\x04\0\x01\x12\x03\x07\x08\x14\
    \n\x0b\n\x04\x04\0\x02\0\x12\x03\x08\x02\x10\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x08\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x08\t\x0b\n\x0c\
    \n\x05\x04\0\x02\0\x03\x12\x03\x08\x0e\x0f\n\x0b\n\x04\x04\0\x02\x01\x12\
    \x03\t\x02\x11\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\t\x02\x07\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\t\x08\x0c\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\t\x0f\x10\n\x0b\n\x04\x04\0\x02\x02\x12\x03\n\x02\x11\n\x0c\n\
    \x05\x04\0\x02\x02\x05\x12\x03\n\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03\n\t\x0c\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\n\x0f\x10\n\x0b\n\
    \x04\x04\0\x02\x03\x12\x03\x0b\x02\x15\n\x0c\n\x05\x04\0\x02\x03\x06\x12\
    \x03\x0b\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x0b\t\x10\n\x0c\n\
    \x05\x04\0\x02\x03\x03\x12\x03\x0b\x13\x14b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::pair_id::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PoolMetadata::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
