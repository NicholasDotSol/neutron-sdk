// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `neutron/dex/limit_order_tranche_user.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:neutron.dex.LimitOrderTrancheUser)
pub struct LimitOrderTrancheUser {
    // message fields
    // @@protoc_insertion_point(field:neutron.dex.LimitOrderTrancheUser.trade_pair_id)
    pub trade_pair_id: ::protobuf::MessageField<super::trade_pair_id::TradePairID>,
    // @@protoc_insertion_point(field:neutron.dex.LimitOrderTrancheUser.tick_index_taker_to_maker)
    pub tick_index_taker_to_maker: i64,
    // @@protoc_insertion_point(field:neutron.dex.LimitOrderTrancheUser.tranche_key)
    pub tranche_key: ::std::string::String,
    // @@protoc_insertion_point(field:neutron.dex.LimitOrderTrancheUser.address)
    pub address: ::std::string::String,
    // @@protoc_insertion_point(field:neutron.dex.LimitOrderTrancheUser.shares_owned)
    pub shares_owned: ::std::string::String,
    // @@protoc_insertion_point(field:neutron.dex.LimitOrderTrancheUser.shares_withdrawn)
    pub shares_withdrawn: ::std::string::String,
    // @@protoc_insertion_point(field:neutron.dex.LimitOrderTrancheUser.shares_cancelled)
    pub shares_cancelled: ::std::string::String,
    // @@protoc_insertion_point(field:neutron.dex.LimitOrderTrancheUser.order_type)
    pub order_type: ::protobuf::EnumOrUnknown<super::tx::LimitOrderType>,
    // special fields
    // @@protoc_insertion_point(special_field:neutron.dex.LimitOrderTrancheUser.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LimitOrderTrancheUser {
    fn default() -> &'a LimitOrderTrancheUser {
        <LimitOrderTrancheUser as ::protobuf::Message>::default_instance()
    }
}

impl LimitOrderTrancheUser {
    pub fn new() -> LimitOrderTrancheUser {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::trade_pair_id::TradePairID>(
            "trade_pair_id",
            |m: &LimitOrderTrancheUser| { &m.trade_pair_id },
            |m: &mut LimitOrderTrancheUser| { &mut m.trade_pair_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tick_index_taker_to_maker",
            |m: &LimitOrderTrancheUser| { &m.tick_index_taker_to_maker },
            |m: &mut LimitOrderTrancheUser| { &mut m.tick_index_taker_to_maker },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tranche_key",
            |m: &LimitOrderTrancheUser| { &m.tranche_key },
            |m: &mut LimitOrderTrancheUser| { &mut m.tranche_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &LimitOrderTrancheUser| { &m.address },
            |m: &mut LimitOrderTrancheUser| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "shares_owned",
            |m: &LimitOrderTrancheUser| { &m.shares_owned },
            |m: &mut LimitOrderTrancheUser| { &mut m.shares_owned },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "shares_withdrawn",
            |m: &LimitOrderTrancheUser| { &m.shares_withdrawn },
            |m: &mut LimitOrderTrancheUser| { &mut m.shares_withdrawn },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "shares_cancelled",
            |m: &LimitOrderTrancheUser| { &m.shares_cancelled },
            |m: &mut LimitOrderTrancheUser| { &mut m.shares_cancelled },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "order_type",
            |m: &LimitOrderTrancheUser| { &m.order_type },
            |m: &mut LimitOrderTrancheUser| { &mut m.order_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LimitOrderTrancheUser>(
            "LimitOrderTrancheUser",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LimitOrderTrancheUser {
    const NAME: &'static str = "LimitOrderTrancheUser";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.trade_pair_id)?;
                },
                16 => {
                    self.tick_index_taker_to_maker = is.read_int64()?;
                },
                26 => {
                    self.tranche_key = is.read_string()?;
                },
                34 => {
                    self.address = is.read_string()?;
                },
                42 => {
                    self.shares_owned = is.read_string()?;
                },
                50 => {
                    self.shares_withdrawn = is.read_string()?;
                },
                58 => {
                    self.shares_cancelled = is.read_string()?;
                },
                64 => {
                    self.order_type = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.trade_pair_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.tick_index_taker_to_maker != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.tick_index_taker_to_maker);
        }
        if !self.tranche_key.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.tranche_key);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.address);
        }
        if !self.shares_owned.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.shares_owned);
        }
        if !self.shares_withdrawn.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.shares_withdrawn);
        }
        if !self.shares_cancelled.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.shares_cancelled);
        }
        if self.order_type != ::protobuf::EnumOrUnknown::new(super::tx::LimitOrderType::GOOD_TIL_CANCELLED) {
            my_size += ::protobuf::rt::int32_size(8, self.order_type.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.trade_pair_id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.tick_index_taker_to_maker != 0 {
            os.write_int64(2, self.tick_index_taker_to_maker)?;
        }
        if !self.tranche_key.is_empty() {
            os.write_string(3, &self.tranche_key)?;
        }
        if !self.address.is_empty() {
            os.write_string(4, &self.address)?;
        }
        if !self.shares_owned.is_empty() {
            os.write_string(5, &self.shares_owned)?;
        }
        if !self.shares_withdrawn.is_empty() {
            os.write_string(6, &self.shares_withdrawn)?;
        }
        if !self.shares_cancelled.is_empty() {
            os.write_string(7, &self.shares_cancelled)?;
        }
        if self.order_type != ::protobuf::EnumOrUnknown::new(super::tx::LimitOrderType::GOOD_TIL_CANCELLED) {
            os.write_enum(8, ::protobuf::EnumOrUnknown::value(&self.order_type))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LimitOrderTrancheUser {
        LimitOrderTrancheUser::new()
    }

    fn clear(&mut self) {
        self.trade_pair_id.clear();
        self.tick_index_taker_to_maker = 0;
        self.tranche_key.clear();
        self.address.clear();
        self.shares_owned.clear();
        self.shares_withdrawn.clear();
        self.shares_cancelled.clear();
        self.order_type = ::protobuf::EnumOrUnknown::new(super::tx::LimitOrderType::GOOD_TIL_CANCELLED);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LimitOrderTrancheUser {
        static instance: LimitOrderTrancheUser = LimitOrderTrancheUser {
            trade_pair_id: ::protobuf::MessageField::none(),
            tick_index_taker_to_maker: 0,
            tranche_key: ::std::string::String::new(),
            address: ::std::string::String::new(),
            shares_owned: ::std::string::String::new(),
            shares_withdrawn: ::std::string::String::new(),
            shares_cancelled: ::std::string::String::new(),
            order_type: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LimitOrderTrancheUser {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LimitOrderTrancheUser").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LimitOrderTrancheUser {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LimitOrderTrancheUser {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*neutron/dex/limit_order_tranche_user.proto\x12\x0bneutron.dex\x1a\x14\
    gogoproto/gogo.proto\x1a\x1fneutron/dex/trade_pair_id.proto\x1a\x14neutr\
    on/dex/tx.proto\"\x96\x05\n\x15LimitOrderTrancheUser\x12<\n\rtrade_pair_\
    id\x18\x01\x20\x01(\x0b2\x18.neutron.dex.TradePairIDR\x0btradePairId\x12\
    8\n\x19tick_index_taker_to_maker\x18\x02\x20\x01(\x03R\x15tickIndexTaker\
    ToMaker\x12\x1f\n\x0btranche_key\x18\x03\x20\x01(\tR\ntrancheKey\x12\x18\
    \n\x07address\x18\x04\x20\x01(\tR\x07address\x12x\n\x0cshares_owned\x18\
    \x05\x20\x01(\tR\x0bsharesOwnedBU\xf2\xde\x1f\x13yaml:\"shares_owned\"\
    \xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Int\xc8\xde\x1f\0\xea\
    \xde\x1f\x0cshares_owned\x12\x88\x01\n\x10shares_withdrawn\x18\x06\x20\
    \x01(\tR\x0fsharesWithdrawnB]\xf2\xde\x1f\x17yaml:\"shares_withdrawn\"\
    \xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Int\xc8\xde\x1f\0\xea\
    \xde\x1f\x10shares_withdrawn\x12\x88\x01\n\x10shares_cancelled\x18\x07\
    \x20\x01(\tR\x0fsharesCancelledB]\xf2\xde\x1f\x17yaml:\"shares_cancelled\
    \"\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Int\xc8\xde\x1f\0\xea\
    \xde\x1f\x10shares_cancelled\x12:\n\norder_type\x18\x08\x20\x01(\x0e2\
    \x1b.neutron.dex.LimitOrderTypeR\torderTypeB,Z*github.com/neutron-org/ne\
    utron/x/dex/typesJ\x9e\x06\n\x06\x12\x04\0\0\x20\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x14\n\x08\n\x01\x08\x12\x03\
    \x03\0A\n\t\n\x02\x08\x0b\x12\x03\x03\0A\n\t\n\x02\x03\0\x12\x03\x04\0\
    \x1e\n\t\n\x02\x03\x01\x12\x03\x05\0)\n\t\n\x02\x03\x02\x12\x03\x06\0\
    \x1e\n\n\n\x02\x04\0\x12\x04\x08\0\x20\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x08\x08\x1d\n\x0b\n\x04\x04\0\x02\0\x12\x03\t\x02\x20\n\x0c\n\x05\x04\0\
    \x02\0\x06\x12\x03\t\x02\r\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\t\x0e\x1b\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\t\x1e\x1f\n\x0b\n\x04\x04\0\x02\x01\
    \x12\x03\n\x02&\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\n\x02\x07\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\n\x08!\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03\n$%\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x0b\x02\x19\n\x0c\n\x05\x04\0\
    \x02\x02\x05\x12\x03\x0b\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\
    \x0b\t\x14\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0b\x17\x18\n\x0b\n\x04\
    \x04\0\x02\x03\x12\x03\x0c\x02\x15\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\
    \x0c\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x0c\t\x10\n\x0c\n\x05\
    \x04\0\x02\x03\x03\x12\x03\x0c\x13\x14\n\x0c\n\x04\x04\0\x02\x04\x12\x04\
    \r\x02\x12\x04\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\r\x02\x08\n\x0c\n\
    \x05\x04\0\x02\x04\x01\x12\x03\r\t\x15\n\x0c\n\x05\x04\0\x02\x04\x03\x12\
    \x03\r\x18\x19\n\r\n\x05\x04\0\x02\x04\x08\x12\x04\r\x1b\x12\x03\n\x0f\n\
    \x08\x04\0\x02\x04\x08\xee\xfb\x03\x12\x03\x0e\x066\n\x0f\n\x08\x04\0\
    \x02\x04\x08\xeb\xfb\x03\x12\x03\x0f\x06G\n\x0f\n\x08\x04\0\x02\x04\x08\
    \xe9\xfb\x03\x12\x03\x10\x06$\n\x0f\n\x08\x04\0\x02\x04\x08\xed\xfb\x03\
    \x12\x03\x11\x06*\n\x0c\n\x04\x04\0\x02\x05\x12\x04\x13\x02\x18\x04\n\
    \x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x13\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x05\x01\x12\x03\x13\t\x19\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x13\x1c\
    \x1d\n\r\n\x05\x04\0\x02\x05\x08\x12\x04\x13\x1f\x18\x03\n\x0f\n\x08\x04\
    \0\x02\x05\x08\xee\xfb\x03\x12\x03\x14\x06:\n\x0f\n\x08\x04\0\x02\x05\
    \x08\xeb\xfb\x03\x12\x03\x15\x06G\n\x0f\n\x08\x04\0\x02\x05\x08\xe9\xfb\
    \x03\x12\x03\x16\x06$\n\x0f\n\x08\x04\0\x02\x05\x08\xed\xfb\x03\x12\x03\
    \x17\x06.\n\x0c\n\x04\x04\0\x02\x06\x12\x04\x19\x02\x1e\x04\n\x0c\n\x05\
    \x04\0\x02\x06\x05\x12\x03\x19\x02\x08\n\x0c\n\x05\x04\0\x02\x06\x01\x12\
    \x03\x19\t\x19\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x19\x1c\x1d\n\r\n\
    \x05\x04\0\x02\x06\x08\x12\x04\x19\x1f\x1e\x03\n\x0f\n\x08\x04\0\x02\x06\
    \x08\xee\xfb\x03\x12\x03\x1a\x06:\n\x0f\n\x08\x04\0\x02\x06\x08\xeb\xfb\
    \x03\x12\x03\x1b\x06G\n\x0f\n\x08\x04\0\x02\x06\x08\xe9\xfb\x03\x12\x03\
    \x1c\x06$\n\x0f\n\x08\x04\0\x02\x06\x08\xed\xfb\x03\x12\x03\x1d\x06.\n\
    \x0b\n\x04\x04\0\x02\x07\x12\x03\x1f\x02\x20\n\x0c\n\x05\x04\0\x02\x07\
    \x06\x12\x03\x1f\x02\x10\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\x1f\x11\
    \x1b\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\x1f\x1e\x1fb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::trade_pair_id::file_descriptor().clone());
            deps.push(super::tx::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(LimitOrderTrancheUser::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
