// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `neutron/dex/pool_reserves.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:neutron.dex.PoolReservesKey)
pub struct PoolReservesKey {
    // message fields
    // @@protoc_insertion_point(field:neutron.dex.PoolReservesKey.trade_pair_id)
    pub trade_pair_id: ::protobuf::MessageField<super::trade_pair_id::TradePairID>,
    // @@protoc_insertion_point(field:neutron.dex.PoolReservesKey.tick_index_taker_to_maker)
    pub tick_index_taker_to_maker: i64,
    // @@protoc_insertion_point(field:neutron.dex.PoolReservesKey.fee)
    pub fee: u64,
    // special fields
    // @@protoc_insertion_point(special_field:neutron.dex.PoolReservesKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PoolReservesKey {
    fn default() -> &'a PoolReservesKey {
        <PoolReservesKey as ::protobuf::Message>::default_instance()
    }
}

impl PoolReservesKey {
    pub fn new() -> PoolReservesKey {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::trade_pair_id::TradePairID>(
            "trade_pair_id",
            |m: &PoolReservesKey| { &m.trade_pair_id },
            |m: &mut PoolReservesKey| { &mut m.trade_pair_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tick_index_taker_to_maker",
            |m: &PoolReservesKey| { &m.tick_index_taker_to_maker },
            |m: &mut PoolReservesKey| { &mut m.tick_index_taker_to_maker },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fee",
            |m: &PoolReservesKey| { &m.fee },
            |m: &mut PoolReservesKey| { &mut m.fee },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PoolReservesKey>(
            "PoolReservesKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PoolReservesKey {
    const NAME: &'static str = "PoolReservesKey";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.trade_pair_id)?;
                },
                16 => {
                    self.tick_index_taker_to_maker = is.read_int64()?;
                },
                24 => {
                    self.fee = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.trade_pair_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.tick_index_taker_to_maker != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.tick_index_taker_to_maker);
        }
        if self.fee != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.fee);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.trade_pair_id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.tick_index_taker_to_maker != 0 {
            os.write_int64(2, self.tick_index_taker_to_maker)?;
        }
        if self.fee != 0 {
            os.write_uint64(3, self.fee)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PoolReservesKey {
        PoolReservesKey::new()
    }

    fn clear(&mut self) {
        self.trade_pair_id.clear();
        self.tick_index_taker_to_maker = 0;
        self.fee = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PoolReservesKey {
        static instance: PoolReservesKey = PoolReservesKey {
            trade_pair_id: ::protobuf::MessageField::none(),
            tick_index_taker_to_maker: 0,
            fee: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PoolReservesKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PoolReservesKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PoolReservesKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PoolReservesKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:neutron.dex.PoolReserves)
pub struct PoolReserves {
    // message fields
    // @@protoc_insertion_point(field:neutron.dex.PoolReserves.key)
    pub key: ::protobuf::MessageField<PoolReservesKey>,
    // @@protoc_insertion_point(field:neutron.dex.PoolReserves.reserves_maker_denom)
    pub reserves_maker_denom: ::std::string::String,
    // @@protoc_insertion_point(field:neutron.dex.PoolReserves.price_taker_to_maker)
    pub price_taker_to_maker: ::std::string::String,
    // @@protoc_insertion_point(field:neutron.dex.PoolReserves.price_opposite_taker_to_maker)
    pub price_opposite_taker_to_maker: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:neutron.dex.PoolReserves.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PoolReserves {
    fn default() -> &'a PoolReserves {
        <PoolReserves as ::protobuf::Message>::default_instance()
    }
}

impl PoolReserves {
    pub fn new() -> PoolReserves {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PoolReservesKey>(
            "key",
            |m: &PoolReserves| { &m.key },
            |m: &mut PoolReserves| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "reserves_maker_denom",
            |m: &PoolReserves| { &m.reserves_maker_denom },
            |m: &mut PoolReserves| { &mut m.reserves_maker_denom },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "price_taker_to_maker",
            |m: &PoolReserves| { &m.price_taker_to_maker },
            |m: &mut PoolReserves| { &mut m.price_taker_to_maker },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "price_opposite_taker_to_maker",
            |m: &PoolReserves| { &m.price_opposite_taker_to_maker },
            |m: &mut PoolReserves| { &mut m.price_opposite_taker_to_maker },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PoolReserves>(
            "PoolReserves",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PoolReserves {
    const NAME: &'static str = "PoolReserves";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.key)?;
                },
                18 => {
                    self.reserves_maker_denom = is.read_string()?;
                },
                26 => {
                    self.price_taker_to_maker = is.read_string()?;
                },
                34 => {
                    self.price_opposite_taker_to_maker = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.reserves_maker_denom.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.reserves_maker_denom);
        }
        if !self.price_taker_to_maker.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.price_taker_to_maker);
        }
        if !self.price_opposite_taker_to_maker.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.price_opposite_taker_to_maker);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.reserves_maker_denom.is_empty() {
            os.write_string(2, &self.reserves_maker_denom)?;
        }
        if !self.price_taker_to_maker.is_empty() {
            os.write_string(3, &self.price_taker_to_maker)?;
        }
        if !self.price_opposite_taker_to_maker.is_empty() {
            os.write_string(4, &self.price_opposite_taker_to_maker)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PoolReserves {
        PoolReserves::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.reserves_maker_denom.clear();
        self.price_taker_to_maker.clear();
        self.price_opposite_taker_to_maker.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PoolReserves {
        static instance: PoolReserves = PoolReserves {
            key: ::protobuf::MessageField::none(),
            reserves_maker_denom: ::std::string::String::new(),
            price_taker_to_maker: ::std::string::String::new(),
            price_opposite_taker_to_maker: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PoolReserves {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PoolReserves").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PoolReserves {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PoolReserves {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fneutron/dex/pool_reserves.proto\x12\x0bneutron.dex\x1a\x14gogoprot\
    o/gogo.proto\x1a\x1fneutron/dex/trade_pair_id.proto\"\x9b\x01\n\x0fPoolR\
    eservesKey\x12<\n\rtrade_pair_id\x18\x01\x20\x01(\x0b2\x18.neutron.dex.T\
    radePairIDR\x0btradePairId\x128\n\x19tick_index_taker_to_maker\x18\x02\
    \x20\x01(\x03R\x15tickIndexTakerToMaker\x12\x10\n\x03fee\x18\x03\x20\x01\
    (\x04R\x03fee\"\xc4\x04\n\x0cPoolReserves\x12.\n\x03key\x18\x01\x20\x01(\
    \x0b2\x1c.neutron.dex.PoolReservesKeyR\x03key\x12\x97\x01\n\x14reserves_\
    maker_denom\x18\x02\x20\x01(\tR\x12reservesMakerDenomBe\xf2\xde\x1f\x1by\
    aml:\"reserves_maker_denom\"\xda\xde\x1f&github.com/cosmos/cosmos-sdk/ty\
    pes.Int\xea\xde\x1f\x14reserves_maker_denom\xc8\xde\x1f\0\x12\xa1\x01\n\
    \x14price_taker_to_maker\x18\x03\x20\x01(\tR\x11priceTakerToMakerBp\xf2\
    \xde\x1f\x1byaml:\"price_taker_to_maker\"\xda\xde\x1f1github.com/neutron\
    -org/neutron/utils/math.PrecDec\xc8\xde\x1f\0\xea\xde\x1f\x14price_taker\
    _to_maker\x12\xc5\x01\n\x1dprice_opposite_taker_to_maker\x18\x04\x20\x01\
    (\tR\x19priceOppositeTakerToMakerB\x82\x01\xf2\xde\x1f$yaml:\"price_oppo\
    site_taker_to_maker\"\xda\xde\x1f1github.com/neutron-org/neutron/utils/m\
    ath.PrecDec\xc8\xde\x1f\0\xea\xde\x1f\x1dprice_opposite_taker_to_makerB,\
    Z*github.com/neutron-org/neutron/x/dex/typesJ\xf4\x05\n\x06\x12\x04\0\0!\
    \x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x14\n\
    \x08\n\x01\x08\x12\x03\x03\0A\n\t\n\x02\x08\x0b\x12\x03\x03\0A\n\t\n\x02\
    \x03\0\x12\x03\x04\0\x1e\n\t\n\x02\x03\x01\x12\x03\x05\0)\n\n\n\x02\x04\
    \0\x12\x04\x07\0\x0b\x01\n\n\n\x03\x04\0\x01\x12\x03\x07\x08\x17\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\x08\x08&\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\
    \x08\x08\x13\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x08\x14!\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x08$%\n\x0b\n\x04\x04\0\x02\x01\x12\x03\t\x08,\
    \n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\t\x08\r\n\x0c\n\x05\x04\0\x02\x01\
    \x01\x12\x03\t\x0e'\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\t*+\n\x0b\n\
    \x04\x04\0\x02\x02\x12\x03\n\x08\x17\n\x0c\n\x05\x04\0\x02\x02\x05\x12\
    \x03\n\x08\x0e\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\n\x0f\x12\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03\n\x15\x16\n\n\n\x02\x04\x01\x12\x04\r\0!\
    \x01\n\n\n\x03\x04\x01\x01\x12\x03\r\x08\x14\n\x0b\n\x04\x04\x01\x02\0\
    \x12\x03\x0e\x02\x1a\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x0e\x02\x11\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0e\x12\x15\n\x0c\n\x05\x04\x01\x02\
    \0\x03\x12\x03\x0e\x18\x19\n\x0c\n\x04\x04\x01\x02\x01\x12\x04\x0f\x02\
    \x14\x13\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0f\x02\x08\n\x0c\n\x05\
    \x04\x01\x02\x01\x01\x12\x03\x0f\t\x1d\n\x0c\n\x05\x04\x01\x02\x01\x03\
    \x12\x03\x0f\x20!\n\r\n\x05\x04\x01\x02\x01\x08\x12\x04\x0f\"\x14\x12\n\
    \x0f\n\x08\x04\x01\x02\x01\x08\xee\xfb\x03\x12\x03\x10\x11I\n\x0f\n\x08\
    \x04\x01\x02\x01\x08\xeb\xfb\x03\x12\x03\x11\x11R\n\x0f\n\x08\x04\x01\
    \x02\x01\x08\xed\xfb\x03\x12\x03\x12\x11=\n\x0f\n\x08\x04\x01\x02\x01\
    \x08\xe9\xfb\x03\x12\x03\x13\x11/\n\x0c\n\x04\x04\x01\x02\x02\x12\x04\
    \x15\x02\x1a\x12\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x15\x02\x08\n\
    \x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x15\t\x1d\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03\x15\x20!\n\r\n\x05\x04\x01\x02\x02\x08\x12\x04\x15\"\
    \x1a\x11\n\x0f\n\x08\x04\x01\x02\x02\x08\xee\xfb\x03\x12\x03\x16\x10H\n\
    \x0f\n\x08\x04\x01\x02\x02\x08\xeb\xfb\x03\x12\x03\x17\x10\\\n\x0f\n\x08\
    \x04\x01\x02\x02\x08\xe9\xfb\x03\x12\x03\x18\x10.\n\x0f\n\x08\x04\x01\
    \x02\x02\x08\xed\xfb\x03\x12\x03\x19\x10<\n\x0c\n\x04\x04\x01\x02\x03\
    \x12\x04\x1b\x02\x20\x12\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x1b\x02\
    \x08\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x1b\t&\n\x0c\n\x05\x04\x01\
    \x02\x03\x03\x12\x03\x1b)*\n\r\n\x05\x04\x01\x02\x03\x08\x12\x04\x1b+\
    \x20\x11\n\x0f\n\x08\x04\x01\x02\x03\x08\xee\xfb\x03\x12\x03\x1c\x10Q\n\
    \x0f\n\x08\x04\x01\x02\x03\x08\xeb\xfb\x03\x12\x03\x1d\x10\\\n\x0f\n\x08\
    \x04\x01\x02\x03\x08\xe9\xfb\x03\x12\x03\x1e\x10.\n\x0f\n\x08\x04\x01\
    \x02\x03\x08\xed\xfb\x03\x12\x03\x1f\x10Eb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::trade_pair_id::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(PoolReservesKey::generated_message_descriptor_data());
            messages.push(PoolReserves::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
